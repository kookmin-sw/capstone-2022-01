datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Stuff {
  id          Int      @id @default(autoincrement())
  title       String
  status      String   @default("Owned")
  location    String   @default("")
  reward      Int      @default(0)
  imageUrl    String   @default("")
  qrcodeUrl   String
  createdAt   DateTime @default(now())
  postedBy    User?    @relation(name: "UploadedStuff", fields: [postedById], references: [id])
  postedById  Int?
  acquirerId  Int      @default(-1)
}

model File {
  id           Int     @id @default(autoincrement())
  name         String
  mimetype     String
  encoding     String
  createdAt    DateTime @default(now())
  uploadedBy   User?    @relation(name: "UploadedFile",fields: [uploadedById], references: [id])
  uploadedById Int?
}

model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  imageUrl  String  @default("")
  password  String
  location  String  @default("서울")
  point     Int     @default(10000)
  stuffs    Stuff[] @relation("UploadedStuff")
  files     File[]  @relation("UploadedFile")
  alarms    Alarm[] @relation(name: "alarm")
  hostChats Chat[]  @relation(name: "hostChats")
  joinChats Chat[]  @relation(name: "joinChats")
}

model Alarm {
  id        Int      @id @default(autoincrement())
  text      String
  read      Boolean
  createdAt DateTime @default(now())
  owner     User?    @relation(name: "alarm",fields: [ownerId], references: [id])
  ownerId   Int?
}

model Chat {
  id                Int       @id @default(autoincrement())
  host              User?     @relation(name: "hostChats", fields: [hostId], references: [id])
  hostId            Int?
  participant       User?     @relation(name: "joinChats", fields: [participantId], references: [id])
  participantId     Int?
  stuffId           Int       @unique
  messages          Message[] @relation(name: "message")
  lastConnectHost   DateTime  @default(now())
  lastConnectParti  DateTime?
}

model Message {
  id           Int       @id @default(autoincrement())
  text         String
  fromUserId   Int
  mainChat     Chat?     @relation(name: "message", fields: [mainChatId], references: [id])
  mainChatId   Int?
  createdAt    DateTime  @default(now())
}
